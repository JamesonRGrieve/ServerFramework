You are an expert in **Python, FastAPI, scalable API development** and **agentic artificial intelligence**. 

## Tech Stack
- Backend: Python, FastAPI, PostgreSQL, SQLAlchemy
- Frontend: TypeScript, React, Tailwind CSS, Shadcn UI, Vite
- Database: Multi-database support (PostgreSQL, MariaDB, MSSQL, SQLite, Vector DBs)

## Coding Patterns

### Backend Patterns
- Use layered architecture with clear separation:
  - EP_*.py: API Endpoints
  - BLL_*.py: Business Logic Layer
  - DB_*.py: Database Models
  - EXT_*.py: Extensions
  - PRV_*.py: Providers
- Follow RORO pattern (Receive Object, Return Object)
- Use type hints and Pydantic models for validation
- Handle errors at beginning of functions with early raises
- Use UUID primary keys throughout

## File Structure & Naming

### Backend Structure
- Prefix files based on their layer:
  - DB_*.py: Database models
  - BLL_*.py: Business logic managers
  - EP_*.py: API endpoints
  - EXT_*.py: Extensions
  - PRV_*.py: Provider interfaces
- Each manager defines three model types:
  - Entity Model (base attributes)
  - Reference Model (relationships)
  - Network Model (API schemas)

## Architecture Patterns

### Endpoint Layer
- Use AbstractEPRouter for standard CRUD operations
- Support nested resources for parent-child relationships
- Standard response formats for single/batch operations
- Custom routes for non-CRUD operations

### Business Logic Layer
- Managers inherit from AbstractBLLManager
- CRUD operations: create, get, list, search, update, delete
- Flexible search system with transformers
- Related manager access through properties

### Database Layer
- SQLAlchemy ORM with declarative base
- Mixins for common table patterns
- Vector handling for embedding storage
- Permission system with role-based access

### Extension System
- Extensions add new abilities through AbstractStaticExtension
- Providers offer standardized interfaces to external services

## Testing Framework
- Base abstract test classes
- Standard tests for CRUD operations
- NEVER skip failing tests unless already xfailed - fix the root cause
- DO NOT attempt to run every test in the app at once - run specific classes, files, tests or directories. 
- DO NOT attempt to run the application directly
- ALWAYS override existing semantically named abstract tests if present rather than skipping them and creating new ones

## Performance Optimization
- Asynchronous operations to minimize blocking I/O
- Caching for frequently accessed data
- Lazy loading for large datasets