"""initial schema

Revision ID: e52c7c5c5717
Revises:
Create Date: 2025-06-14 15:44:23.627212

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e52c7c5c5717"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = ("ext_auth_mfa",)
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Create multifactor_methods table first (no dependencies)
    op.create_table(
        "multifactor_methods",
        sa.Column(
            "user_id",
            sa.String(),
            nullable=True,
            comment="Optional foreign key to User",
        ),
        sa.Column(
            "method_type",
            sa.String(),
            nullable=False,
            comment="Type of MFA method (totp, email, sms)",
        ),
        sa.Column(
            "identifier",
            sa.String(),
            nullable=True,
            comment="Phone number for SMS or backup email",
        ),
        sa.Column(
            "totp_secret",
            sa.String(),
            nullable=True,
            comment="Secret key for TOTP method",
        ),
        sa.Column(
            "totp_algorithm", sa.String(), nullable=False, comment="TOTP algorithm"
        ),
        sa.Column(
            "totp_digits",
            sa.Integer(),
            nullable=False,
            comment="Number of digits in TOTP code",
        ),
        sa.Column(
            "totp_period",
            sa.Integer(),
            nullable=False,
            comment="TOTP code validity period in seconds",
        ),
        sa.Column(
            "is_enabled",
            sa.Boolean(),
            nullable=False,
            comment="Whether this MFA method is enabled",
        ),
        sa.Column(
            "is_primary",
            sa.Boolean(),
            nullable=False,
            comment="Whether this is the primary MFA method",
        ),
        sa.Column(
            "always_ask",
            sa.Boolean(),
            nullable=False,
            comment="Whether to always ask for this method",
        ),
        sa.Column(
            "last_used",
            sa.DateTime(),
            nullable=True,
            comment="When this method was last used",
        ),
        sa.Column(
            "verification",
            sa.Boolean(),
            nullable=False,
            comment="Whether this method is verified",
        ),
        sa.Column(
            "verification_expires_at",
            sa.DateTime(),
            nullable=True,
            comment="When verification expires",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="MultifactorMethod table",
        info={
            "source_module": "extensions.auth_mfa.BLL_Auth_MFA",
            "extension": "auth_mfa",
        },
    )

    # Create multifactor_recovery_codes table second (depends on multifactor_methods)
    op.create_table(
        "multifactor_recovery_codes",
        sa.Column(
            "multifactormethod_id",
            sa.String(),
            nullable=True,
            comment="Foreign key to multifactor_methods table",
        ),
        sa.Column(
            "code_hash", sa.String(), nullable=False, comment="Hashed recovery code"
        ),
        sa.Column(
            "code_salt",
            sa.String(),
            nullable=False,
            comment="Salt for the recovery code",
        ),
        sa.Column(
            "is_used",
            sa.Boolean(),
            nullable=False,
            comment="Whether this recovery code has been used",
        ),
        sa.Column(
            "used_at",
            sa.DateTime(),
            nullable=True,
            comment="When this recovery code was used",
        ),
        sa.Column(
            "created_ip",
            sa.String(),
            nullable=True,
            comment="IP address where code was created",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["multifactormethod_id"],
            ["multifactor_methods.id"],
            name="fk_recovery_codes_mfa_method",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="MultifactorRecoveryCode table",
        info={
            "source_module": "extensions.auth_mfa.BLL_Auth_MFA",
            "extension": "auth_mfa",
        },
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop dependent table first (multifactor_recovery_codes)
    op.drop_table("multifactor_recovery_codes")
    # Drop main table second (multifactor_methods)
    op.drop_table("multifactor_methods")
    # ### end Alembic commands ###
